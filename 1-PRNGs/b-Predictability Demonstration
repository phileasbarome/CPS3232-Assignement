import matplotlib.pyplot as plt

class LCG:
    def __init__(self, seed, a=1664525, c=1013904223, m=2**32):
        self.state = seed
        self.a = a
        self.c = c
        self.m = m

    def next(self):
        self.state = (self.a * self.state + self.c) % self.m
        return self.state

    def next_range(self, low, high):
        return low + self.next() % (high - low + 1)

lcg = LCG(seed=12345, a=1664525, c=1013904223, m=2**32)


# Example of token generation
tokens = [lcg.next() for _ in range(5)]
print("Tokens:", tokens)

# Predict the next number (reverse LCG formula)
def predict_lcg(a, c, m, x1, x2, x3):
    a_inv = pow(a, -1, m)  # Modular inverse of a
    predicted = (x3 - c) * a_inv % m
    return predicted

next_prediction = predict_lcg(lcg.a, lcg.c, lcg.m, tokens[2], tokens[3], tokens[4])
print("Predicted token:", next_prediction)
